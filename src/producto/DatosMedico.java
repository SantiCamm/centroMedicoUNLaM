package producto;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Logger;

import javax.swing.JOptionPane;

public class DatosMedico extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	private static Logger logger = Logger.getLogger(DatosMedico.class.getName());

	/*
	 * Constructor
	 */
	public DatosMedico() {
		initComponents();
		MenuPrincipalForm.CenteredFrame(this);
	}

	/*
	 * Limpia el formulario
	 */
	public void cleanForm() {
		codField.setText(null);
		nomField.setText(null);
		espField.setText(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		codField = new javax.swing.JTextField();
		nomField = new javax.swing.JTextField();
		espField = new javax.swing.JTextField();
		jButton1 = new javax.swing.JButton();

		this.setTitle("Medicus - Agregar médico");

		jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
		jLabel1.setText("Agregar médico");

		jLabel2.setText("Complete los siguientes datos:");

		jLabel3.setText("Código del médico");

		jLabel4.setText("Nombre del médico");

		jLabel5.setText("Especialización");

		jButton1.setText("Agregar médico");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel4)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jPanel1Layout.createSequentialGroup()
												.addGroup(jPanel1Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jLabel1).addComponent(jLabel2))
												.addGap(154, 154, 154))
										.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
												jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
																jPanel1Layout.createSequentialGroup()
																		.addComponent(jLabel3).addGap(22, 22, 22))
														.addGroup(
																jPanel1Layout.createSequentialGroup()
																		.addComponent(jLabel5).addGap(38, 38, 38)))
														.addGroup(jPanel1Layout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING,
																		false)
																.addComponent(codField).addComponent(nomField)
																.addComponent(espField,
																		javax.swing.GroupLayout.DEFAULT_SIZE, 188,
																		Short.MAX_VALUE))))))
						.addGroup(jPanel1Layout.createSequentialGroup().addGap(158, 158, 158).addComponent(jButton1)))
						.addContainerGap(69, Short.MAX_VALUE)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addComponent(jLabel1)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jLabel2)
						.addGap(18, 18, 18)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel3).addComponent(codField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel4).addComponent(nomField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel5).addComponent(espField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18).addComponent(jButton1).addContainerGap(25, Short.MAX_VALUE)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 25, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/*
	 * Valida el codigo del medico
	 */
	private boolean validarCodMed(String codmed) {
		if (codmed.isEmpty()) {
			JOptionPane.showMessageDialog(null, "Error: complete el campo código", "Error", JOptionPane.ERROR_MESSAGE);
			codField.requestFocus();
			return false;
		}
		if (!MenuPrincipalForm.isNumeric(codmed)) {
			JOptionPane.showMessageDialog(null, "Error: complete el campo código con números", "Error",
					JOptionPane.ERROR_MESSAGE);
			codField.setText(null);
			codField.requestFocus();
			return false;
		}
		if (codmed.length() != 5) {
			JOptionPane.showMessageDialog(null, "Error: la longitud del código debe ser de 5 dígitos", "Error",
					JOptionPane.ERROR_MESSAGE);
			codField.setText(null);
			codField.requestFocus();
			return false;
		}
		return true;
	}

	/*
	 * Valida el nombre del medico
	 */
	private boolean validarNomMed(String nommed) {
		if (nommed.isEmpty()) {
			JOptionPane.showMessageDialog(null, "Error: complete el campo nombre", "Error", JOptionPane.ERROR_MESSAGE);
			nomField.requestFocus();
			return false;
		}
		if (!nommed.matches("[a-zA-Z ]+")) {
			JOptionPane.showMessageDialog(null, "Error: complete el campo nombre con letras y/o espacios", "Error",
					JOptionPane.ERROR_MESSAGE);
			nomField.setText(null);
			nomField.requestFocus();
			return false;
		}
		if (nommed.length() < 4 || nommed.length() > 25) {
			JOptionPane.showMessageDialog(null, "Error: la longitud del nombre debe ser entre 4 y 25 caracteres",
					"Error", JOptionPane.ERROR_MESSAGE);
			nomField.setText(null);
			nomField.requestFocus();
			return false;
		}
		if (!Character.isLetter(nommed.charAt(0))) {
			JOptionPane.showMessageDialog(null, "Error: el primer carácter del nombre debe ser una letra", "Error",
					JOptionPane.ERROR_MESSAGE);
			nomField.setText(null);
			nomField.requestFocus();
			return false;
		}
		return true;
	}

	/*
	 * Valida la especializacion del medico
	 */
	private boolean validarEsp(String esp) {
		if (esp.isEmpty()) {
			JOptionPane.showMessageDialog(null, "Error: complete el campo especialización", "Error",
					JOptionPane.ERROR_MESSAGE);
			espField.requestFocus();
			return false;
		}
		if (!esp.matches("[a-zA-Z]+")) {
			JOptionPane.showMessageDialog(null, "Error: complete el campo especialización con letras", "Error",
					JOptionPane.ERROR_MESSAGE);
			espField.setText(null);
			espField.requestFocus();
			return false;
		}
		if (esp.length() < 5 || esp.length() > 20) {
			JOptionPane.showMessageDialog(null,
					"Error: la longitud de la especialización debe ser entre 5 y 20 caracteres", "Error",
					JOptionPane.ERROR_MESSAGE);
			espField.setText(null);
			espField.requestFocus();
			return false;
		}
		return true;
	}

	/*
	 * Agrega al medico al archivo, realizando las validaciones correspondientes, se
	 * ejecuta cuando se presiona en el botón "Agregar medico"
	 */
	private void agregarMedico() {
		// variables
		String codmed, nommed, esp;
		
		// obtengo los valores del form
		codmed = codField.getText();
		nommed = nomField.getText();
		esp = espField.getText();

		// validaciones de los campos
		if (validarCodMed(codmed)) {
			if (validarNomMed(nommed)) {
				if (validarEsp(esp)) {
					// chequeo la existencia del codigo
					if (MenuPrincipalForm.existe("medico", codmed)) {
						// si existe codigo de medico
						// se muestra error
						JOptionPane.showMessageDialog(null, "Error: código de médico existente, por favor utilice otro",
								"Error", JOptionPane.ERROR_MESSAGE);
						codField.setText(null);
						//devuelvo el foco
						codField.requestFocus();
					} else {
						try {
							// intento escribir el archivo
							FileWriter fstream = new FileWriter(MenuPrincipalForm.getRutaArchivoMedicos(), true);
							BufferedWriter datomed = new BufferedWriter(fstream);
							// grabo la linea
							datomed.write(codmed + "|" + nommed + "|" + esp);
							datomed.newLine();
							datomed.close();

						} catch (IOException e) {
						}
						// log del resultado
						logger.info("Médico agregado.");
						// pregunto si se desea agregar otro medico
						int preg = JOptionPane.showConfirmDialog(null,
								"Médico cargado exitosamente, ¿desea agregar otro?", "Aviso",
								JOptionPane.YES_NO_OPTION);
						// en caso afirmativo, limpio el form
						if (preg == JOptionPane.YES_OPTION) {
							this.cleanForm();
						} else {
							// sino, descarto el form
							this.dispose();
						}
					}
				} else {
					// log error especializacion
					logger.info("Error al validar especialización.");
				}
			} else {
				// log error validacion nombre
				logger.info("Error al validar nombre.");
			}
		} else {
			// log error validacion codigo
			logger.info("Error al validar código.");
		}
	}

	/*
	 * Evento asociado al boton
	 */
	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		agregarMedico();
	}// GEN-LAST:event_jButton1ActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(DatosMedico.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(DatosMedico.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(DatosMedico.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DatosMedico.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new DatosMedico().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField codField;
	private javax.swing.JTextField espField;
	private javax.swing.JButton jButton1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JTextField nomField;
	// End of variables declaration//GEN-END:variables
}
